{"version":3,"sources":["Header/Header.js","Clicker/Clicker.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Clicker","props","value","onClick","decrementValue","resetValue","incrementValue","startingClickerValue","App","state","clickerValue","this","setState","Header_Header","Clicker_Clicker","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAGe,SAASA,IACpB,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAd,iBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iDCJV,SAASC,EAAQC,GAC5B,OACIL,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAb,IAAgCE,EAAMC,MAAtC,KACAN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,UAAQK,QAAWF,EAAMG,eAAgBL,UAAU,yBAAnD,IAA4EH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAzF,KACAH,EAAAC,EAAAC,cAAA,UAAQK,QAAWF,EAAMI,WAAYN,UAAU,yBAA/C,IAAwEH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAArF,KACAH,EAAAC,EAAAC,cAAA,UAAQK,QAAWF,EAAMK,eAAgBP,UAAU,wBAAnD,IAA2EH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAxF,QCPpB,IAAMQ,EAAuB,EAoCdC,6MAjCXC,MAAQ,CACJC,aAAcH,mFAIdI,KAAKC,SAAS,CACVF,aAAcC,KAAKF,MAAMC,aAAe,6CAK5CC,KAAKC,SAAS,CACVF,aAAcC,KAAKF,MAAMC,aAAe,yCAK5CC,KAAKC,SAAS,CACVF,aAAcH,qCAKlB,OACIX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,CAASZ,MAAOS,KAAKF,MAAMC,aAAcJ,eAAgBK,KAAKL,eAAeS,KAAKJ,MAC9EP,eAAgBO,KAAKP,eAAeW,KAAKJ,MAAON,WAAYM,KAAKN,WAAWU,KAAKJ,gBA5BnFK,mBCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.961fd015.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nexport default function Header() {\n    return (\n        <header className=\"main-header\">\n            <h1 className=\"main-header__title\">React Clicker</h1>\n            <i className=\"far fa-hand-pointer main-header__icon\"></i>\n        </header>\n    )\n}","import React from 'react';\nimport './Clicker.css';\n\nexport default function Clicker(props) {\n    return (\n        <section className=\"clicker\">\n            <div className=\"clicker__wrapper\">\n                <p className=\"clicker__value\"> {props.value} </p>\n                <div className=\"clicker__buttons\">\n                    <button onClick = {props.decrementValue} className=\"button clicker__minus\"> <i className=\"fas fa-minus\"></i> </button>\n                    <button onClick = {props.resetValue} className=\"button clicker__reset\"> <i className=\"fas fa-undo\"></i> </button>\n                    <button onClick = {props.incrementValue} className=\"button clicker__plus\"> <i className=\"fas fa-plus\"></i> </button>\n                </div>\n            </div>\n        </section>\n    )\n}","import React, { Component } from 'react';\nimport Header from './Header/Header';\nimport Clicker from './Clicker/Clicker';\n\nconst startingClickerValue = 0;\n\nclass App extends Component {\n    state = {\n        clickerValue: startingClickerValue\n    }\n\n    incrementValue() {\n        this.setState({\n            clickerValue: this.state.clickerValue + 1\n        })\n    }\n\n    decrementValue() {\n        this.setState({\n            clickerValue: this.state.clickerValue - 1\n        })\n    }\n\n    resetValue() {\n        this.setState({\n            clickerValue: startingClickerValue\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <Header />\n                <Clicker value={this.state.clickerValue} incrementValue={this.incrementValue.bind(this)}\n                    decrementValue={this.decrementValue.bind(this)} resetValue={this.resetValue.bind(this)} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './Index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}